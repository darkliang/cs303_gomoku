Index: code_template.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- code_template.py	(date 1569556155731)
+++ code_template.py	(date 1569556155731)
@@ -77,6 +77,8 @@
         self.search_breadth = 10
         self.times = 0
 
+        self.defence_factor = 1.1 if color == 1 else 0.9
+
     #   The input is current chessboard.
 
     def go(self, chessboard):
@@ -147,9 +149,9 @@
         if depth == 0 or len(self.empty_list) == 0:
             return self.evaluation(chessboard, color)
 
-        self.search_breadth = self.search_breadth - (4-depth) * 2
+        self.search_breadth = self.search_breadth - (4-depth) * 3
         moves = self.heuristic(chessboard, color)
-        self.search_breadth = 10
+        self.search_breadth = 11
         # if there are no moves, just return the score
 
         for _, (x, y) in moves:
@@ -288,7 +290,7 @@
                         enemy_score += self.cal_score(chessboard, x, y, direction[i][0], direction[i][1],
                                                       score_all_arr_enemy, -color)
 
-        total_score = my_score - 1 * enemy_score
+        total_score = my_score - self.defence_factor * enemy_score
         return total_score
 
     def cal_score(self, chessboard, m, n, x_direction, y_direction, score_all_arr, color, ):
@@ -346,7 +348,7 @@
                     for pt2 in max_score_shape[1]:
                         if pt1 == pt2:
                             if shape[0] >= 1000 and max_score_shape[0] >= 1000:
-                                add_score = (shape[0] + max_score_shape[0]) / 2
+                                add_score = (shape[0] + max_score_shape[0])
                             else:
                                 add_score = min(shape[0], max_score_shape[0])
                             break
